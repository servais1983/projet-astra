# test_hsm_security.py
import os
import json
from sentry_hsm_prod import SentryHSMProduction

def test_hsm_security():
    """Teste la robustesse de notre impl√©mentation HSM contre diff√©rents vecteurs d'attaque."""
    print("\n=== TESTS DE S√âCURIT√â HSM ASTRA SENTRY ===")
    
    hsm_service = SentryHSMProduction()
    
    # Test 1 : Tentative de signature avec une cl√© inexistante
    print("\nüîí Test 1 : Tentative de signature avec cl√© inexistante")
    fake_signature = hsm_service.sign_command("CMD:TEST", "FAKE-KEY")
    if fake_signature is None:
        print("‚úÖ S√âCURIT√â : Rejet correct d'une cl√© inexistante")
    else:
        print("‚ùå VULN√âRABILIT√â : Signature accept√©e avec une cl√© inexistante")
    
    # Test 2 : Tentative de v√©rification avec une signature modifi√©e
    print("\nüîí Test 2 : Tentative de v√©rification avec signature corrompue")
    command = "CMD:SET_ORBIT;SAT:ASTRA-042;PARAMS:400km,90deg"
    valid_signature = hsm_service.sign_command(command)
    
    if valid_signature:
        # Modification de la signature
        corrupted_signature = bytearray(valid_signature)
        if len(corrupted_signature) > 0:
            corrupted_signature[0] ^= 1  # Modification d'un bit
        
        is_valid = hsm_service.verify_command(command, bytes(corrupted_signature))
        if not is_valid:
            print("‚úÖ S√âCURIT√â : D√©tection correcte d'une signature corrompue")
        else:
            print("‚ùå VULN√âRABILIT√â : Signature corrompue accept√©e")
    
    # Test 3 : Tentative de v√©rification avec une commande modifi√©e
    print("\nüîí Test 3 : Tentative de v√©rification avec commande modifi√©e")
    original_command = "CMD:SET_ORBIT;SAT:ASTRA-042;PARAMS:400km,90deg"
    modified_command = "CMD:SET_ORBIT;SAT:ASTRA-042;PARAMS:800km,90deg"  # Altitude modifi√©e
    
    if valid_signature:
        is_valid = hsm_service.verify_command(modified_command, valid_signature)
        if not is_valid:
            print("‚úÖ S√âCURIT√â : D√©tection correcte d'une commande modifi√©e")
        else:
            print("‚ùå VULN√âRABILIT√â : Commande modifi√©e accept√©e")
    
    # Test 4 : Tentative d'acc√®s direct aux cl√©s priv√©es
    print("\nüîí Test 4 : Tentative d'acc√®s direct aux cl√©s priv√©es")
    try:
        with open("astra_hsm_simulation.json", 'r') as f:
            hsm_data = json.load(f)
            private_key = hsm_data["keys"]["Operator-01-Key"]["private_key"]
            print("‚ö†Ô∏è  ATTENTION : Les cl√©s sont stock√©es en clair dans le fichier JSON")
            print("   En production, utiliser un vrai HSM avec chiffrement mat√©riel")
    except Exception as e:
        print(f"‚ùå ERREUR : Impossible d'acc√©der aux donn√©es HSM : {e}")
    
    # Test 5 : Validation de l'int√©grit√© cryptographique
    print("\nüîí Test 5 : Validation de l'int√©grit√© cryptographique")
    test_command = "CMD:EMERGENCY_SHUTDOWN;SAT:ASTRA-042"
    signature = hsm_service.sign_command(test_command)
    
    if signature:
        is_valid = hsm_service.verify_command(test_command, signature)
        if is_valid:
            print("‚úÖ S√âCURIT√â : Int√©grit√© cryptographique valid√©e")
        else:
            print("‚ùå VULN√âRABILIT√â : √âchec de la validation cryptographique")
    
    print("\n=== R√âSUM√â DES TESTS DE S√âCURIT√â ===")
    print("‚úÖ HSM simul√© op√©rationnel pour les tests de d√©veloppement")
    print("‚ö†Ô∏è  Pour la production : utiliser un vrai HSM (Thales, Utimaco, etc.)")
    print("‚ö†Ô∏è  Impl√©menter le chiffrement des cl√©s stock√©es")
    print("‚ö†Ô∏è  Ajouter des contr√¥les d'acc√®s physiques et logiques")

if __name__ == "__main__":
    test_hsm_security() 