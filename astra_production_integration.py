# astra_production_integration.py
import asyncio
import json
import time
from datetime import datetime
from sentry_hsm_prod import SentryHSMProduction
# Simulation PQC sans d√©pendance externe
class WavePQCChannel:
    def establish_channel(self):
        return True  # Simulation r√©ussie
from advanced_detector import AdvancedAnomalyDetector
import subprocess
import os

class AstraProductionSystem:
    """
    Syst√®me de production ASTRA int√©grant tous les piliers :
    - ASTRA SENTRY : Authentification HSM
    - ASTRA WAVE : Communications PQC
    - ASTRA HIVE : D√©tection d'anomalies IA
    - ASTRA CORE : Surveillance d'int√©grit√©
    """
    
    def __init__(self):
        self.sentry = SentryHSMProduction()
        self.wave = WavePQCChannel()
        self.hive = AdvancedAnomalyDetector(input_dim=4)
        self.core_status = "OPERATIONAL"
        self.system_log = []
        
        print("üöÄ Syst√®me ASTRA Production initialis√©")
        print("   - ASTRA SENTRY (HSM) : ‚úÖ")
        print("   - ASTRA WAVE (PQC) : ‚úÖ")
        print("   - ASTRA HIVE (IA) : ‚úÖ")
        print("   - ASTRA CORE (Surveillance) : ‚úÖ")
    
    def log_event(self, event_type, message, severity="INFO"):
        """Enregistre un √©v√©nement syst√®me avec horodatage."""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        event = {
            "timestamp": timestamp,
            "type": event_type,
            "message": message,
            "severity": severity
        }
        self.system_log.append(event)
        print(f"[{timestamp}] {severity}: {message}")
    
    def check_core_integrity(self):
        """V√©rifie l'int√©grit√© du firmware via ASTRA CORE."""
        try:
            # Simulation de v√©rification d'int√©grit√©
            result = subprocess.run(
                ["rustc", "--version"], 
                capture_output=True, 
                text=True, 
                timeout=5
            )
            if result.returncode == 0:
                self.core_status = "OPERATIONAL"
                self.log_event("CORE", "Int√©grit√© firmware valid√©e", "INFO")
                return True
            else:
                self.core_status = "CORRUPTED"
                self.log_event("CORE", "D√©tection de corruption firmware", "CRITICAL")
                return False
        except Exception as e:
            self.core_status = "ERROR"
            self.log_event("CORE", f"Erreur de v√©rification : {e}", "ERROR")
            return False
    
    def analyze_network_context(self, network_data):
        """Analyse le contexte r√©seau avec ASTRA HIVE."""
        try:
            # Pr√©paration des donn√©es pour l'IA
            features = self.hive.prepare_features(network_data)
            anomaly_score = self.hive.detect_anomaly(features)
            
            if anomaly_score > 0.7:
                self.log_event("HIVE", f"Anomalie r√©seau d√©tect√©e (score: {anomaly_score:.3f})", "WARNING")
                return False, anomaly_score
            else:
                self.log_event("HIVE", f"Contexte r√©seau normal (score: {anomaly_score:.3f})", "INFO")
                return True, anomaly_score
        except Exception as e:
            self.log_event("HIVE", f"Erreur d'analyse IA : {e}", "ERROR")
            return False, 1.0
    
    def establish_secure_channel(self):
        """√âtablit un canal s√©curis√© PQC avec ASTRA WAVE."""
        try:
            channel = self.wave.establish_channel()
            if channel:
                self.log_event("WAVE", "Canal PQC √©tabli avec succ√®s", "INFO")
                return True
            else:
                self.log_event("WAVE", "√âchec d'√©tablissement du canal PQC", "ERROR")
                return False
        except Exception as e:
            self.log_event("WAVE", f"Erreur canal PQC : {e}", "ERROR")
            return False
    
    def authorize_command(self, command, operator_key="Operator-01-Key"):
        """Autorise une commande critique via ASTRA SENTRY."""
        try:
            signature = self.sentry.sign_command(command, operator_key)
            if signature:
                is_valid = self.sentry.verify_command(command, signature, operator_key)
                if is_valid:
                    self.log_event("SENTRY", f"Commande autoris√©e : {command}", "INFO")
                    return True
                else:
                    self.log_event("SENTRY", f"Commande rejet√©e (signature invalide) : {command}", "WARNING")
                    return False
            else:
                self.log_event("SENTRY", f"√âchec de signature : {command}", "ERROR")
                return False
        except Exception as e:
            self.log_event("SENTRY", f"Erreur d'autorisation : {e}", "ERROR")
            return False
    
    def execute_critical_command(self, command, network_context=None):
        """
        Ex√©cute une commande critique en respectant le protocole de s√©curit√© complet.
        """
        self.log_event("SYSTEM", f"D√©but d'ex√©cution de commande critique : {command}", "INFO")
        
        # √âtape 1 : V√©rification de l'int√©grit√© du firmware (ASTRA CORE)
        if not self.check_core_integrity():
            self.log_event("SYSTEM", "‚ùå COMMANDE BLOQU√âE : Corruption firmware d√©tect√©e", "CRITICAL")
            return False, "Corruption firmware"
        
        # √âtape 2 : Analyse du contexte r√©seau (ASTRA HIVE)
        if network_context:
            network_safe, anomaly_score = self.analyze_network_context(network_context)
            if not network_safe:
                self.log_event("SYSTEM", f"‚ùå COMMANDE BLOQU√âE : Anomalie r√©seau (score: {anomaly_score:.3f})", "CRITICAL")
                return False, f"Anomalie r√©seau (score: {anomaly_score:.3f})"
        
        # √âtape 3 : √âtablissement du canal s√©curis√© (ASTRA WAVE)
        if not self.establish_secure_channel():
            self.log_event("SYSTEM", "‚ùå COMMANDE BLOQU√âE : Impossible d'√©tablir le canal PQC", "CRITICAL")
            return False, "√âchec canal PQC"
        
        # √âtape 4 : Autorisation par signature HSM (ASTRA SENTRY)
        if not self.authorize_command(command):
            self.log_event("SYSTEM", "‚ùå COMMANDE BLOQU√âE : Autorisation HSM √©chou√©e", "CRITICAL")
            return False, "Autorisation HSM √©chou√©e"
        
        # √âtape 5 : Ex√©cution de la commande
        self.log_event("SYSTEM", f"‚úÖ COMMANDE EX√âCUT√âE : {command}", "INFO")
        return True, "Succ√®s"
    
    def get_system_status(self):
        """Retourne le statut complet du syst√®me."""
        return {
            "timestamp": datetime.now().isoformat(),
            "sentry": "OPERATIONAL",
            "wave": "OPERATIONAL",
            "hive": "OPERATIONAL",
            "core": self.core_status,
            "recent_events": self.system_log[-10:] if self.system_log else []
        }
    
    def export_security_report(self, filename="astra_security_report.json"):
        """Exporte un rapport de s√©curit√© complet."""
        report = {
            "system_status": self.get_system_status(),
            "security_events": self.system_log,
            "hsm_keys": list(self.sentry.hsm_data["keys"].keys()),
            "pqc_channels": "ACTIVE",
            "ai_model": "OPERATIONAL"
        }
        
        with open(filename, 'w') as f:
            json.dump(report, f, indent=2)
        
        self.log_event("SYSTEM", f"Rapport de s√©curit√© export√© : {filename}", "INFO")
        return filename

def run_production_demo():
    """D√©monstration du syst√®me de production ASTRA."""
    print("\n" + "="*60)
    print("üöÄ D√âMONSTRATION SYST√àME ASTRA PRODUCTION")
    print("="*60)
    
    astra = AstraProductionSystem()
    
    # Simulation de donn√©es r√©seau normales
    normal_network = {
        "packet_count": 1000,
        "latency": 50,
        "bandwidth": 100,
        "error_rate": 0.001
    }
    
    # Simulation de donn√©es r√©seau anormales
    anomalous_network = {
        "packet_count": 5000,
        "latency": 200,
        "bandwidth": 20,
        "error_rate": 0.1
    }
    
    # Test 1 : Commande critique avec contexte normal
    print("\nüì° Test 1 : Commande critique avec contexte r√©seau normal")
    success, reason = astra.execute_critical_command(
        "CMD:SET_ORBIT;SAT:ASTRA-042;PARAMS:400km,90deg",
        normal_network
    )
    
    # Test 2 : Commande critique avec contexte anormal
    print("\nüì° Test 2 : Commande critique avec contexte r√©seau anormal")
    success, reason = astra.execute_critical_command(
        "CMD:SET_ORBIT;SAT:ASTRA-042;PARAMS:400km,90deg",
        anomalous_network
    )
    
    # Test 3 : Commande critique sans autorisation HSM
    print("\nüì° Test 3 : Commande critique sans autorisation HSM")
    success, reason = astra.execute_critical_command(
        "CMD:EMERGENCY_SHUTDOWN;SAT:ASTRA-042",
        normal_network
    )
    
    # Export du rapport de s√©curit√©
    report_file = astra.export_security_report()
    
    print(f"\nüìä Rapport de s√©curit√© g√©n√©r√© : {report_file}")
    print("\n" + "="*60)
    print("‚úÖ D√âMONSTRATION TERMIN√âE")
    print("="*60)

if __name__ == "__main__":
    run_production_demo() 